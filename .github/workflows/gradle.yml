name: nsfServer Github Action

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]

permissions: write-all

jobs:
    # jobs는 build, deploy 2개가 있습니다.
    # jobs는 다른 러너(환경)에서 구동됩니다.
    # step는 같은 러너에서 구동됩니다.
    build:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v3
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                  java-version: '17'
                  distribution: 'temurin'

            - name: make application-database.yml
              run: |
                  cd ./src/main/resources

                  # application-database.yml 파일 생성
                  touch ./application-mysql.properties

                  # GitHub-Actions 에서 설정한 값을 application-mysql.properties 파일에 쓰기
                  echo "${{ secrets.MYSQL_PROPERTIES }}" >> ./application-mysql.properties
              shell: bash

            - name: Grant execute permission for gradlew
              run: chmod +x gradlew

            - name: Build and Test with Gradle
              run: ./gradlew clean build

            - name: Login to DockerHub
              uses: docker/login-action@v1
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }} # 요건 Github에서 관리하는 시크릿, 아래서 다루겠습니다.
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Install docker buildx
              uses: docker/setup-buildx-action@v1
            # 도커 빌드
            - name: Build Docker Image
              run: |
                  echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
                  docker buildx create --use
                  docker buildx inspect
                  docker buildx build --platform linux/arm64/v8,linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/nsfserver:v2 --push .
    deploy:
        needs: build
        runs-on: self-hosted
        steps:
            - name: ✨ 배포 스크립트 실행
              run: |
                  sh /home/ubuntu/deploy.sh
            - name: Blue/Green health check
              run: |
                  echo "INSTANCE_ENV=$(curl -s "http://${{ secrets.NGINX_IP }}/env")" >> $GITHUB_ENV
            - name: Set target ip
              # prod1, prod2 둘 다 검사해야 하지만, 현재는 prod1만 검사
              # CURRENT_UPSTREAM : env로 요청 보내서 blue 인지, green인지 알아옴. 이걸 curl로 해서 변수로 만든다. 즉 blue,green,오류 중에 하나
              # CURRENT_IP : 만약 환경이 blue라면 blue 인스턴스의 prod1의 ip(111.111.111.111:8080)가 들어감
              # STOPPED_IP : 만약 환경이 blue라면 멈춰있는 green의 prod1 ip가 들어감.
              # TARGET_UPSTREAM : 바꿀 env
              run: |
                  CURRENT_UPSTREAM=$(curl -s "http://${{ secrets.NGINX_IP }}/env")
                  echo $CURRENT_UPSTREAM
                  if [ $CURRENT_UPSTREAM = "blue" ]; then
                    echo "CURRENT_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
                    echo "STOPPED_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
                    echo "TARGET_UPSTREAM=green" >> $GITHUB_ENV
                    echo ${{ env.CURRENT_IP }}
                    echo ${{ env.STOPPED_IP }}
                  elif [ $CURRENT_UPSTREAM = "green" ]; then
                    echo "CURRENT_IP=${{ secrets.GREEN_IP }}" >> $GITHUB_ENV
                    echo "STOPPED_IP=${{ secrets.BLUE_IP }}" >> $GITHUB_ENV
                    echo "TARGET_UPSTREAM=blue" >> $GITHUB_ENV
                    echo "green"
                  else
                    echo "error"
                    exit 1
                  fi
            - name: Execute Server Docker compose
              uses: appleboy/ssh-action@v0.1.4
              with:
                username: ${{ secrets.SSH_USER }}
                host: ${{ env.STOPPED_IP }} # 위에서 지정한 환경변수
                key: ${{ secrets.SSH_KEY }}
                script_stop: true
                script: |
                  cd ~/workspace/kdh 
                  docker pull ${{ secrets.DOCKERHUB_USERNAME }}/nsfserver:v2
                  docker-compose up -d

            #새로운 인스턴스 헬스체크
            - name: Check the deployed service URL for 8081 port
              uses: jtalk/url-health-check-action@v3
              with:
                url: http://${{ env.STOPPED_IP }}:8081/env
                max-attempts: 5 # Optional, defaults to 1
                retry-delay:  5s # Optional, only applicable to max-attempts > 1
                timeout: 30s
       
            - name: Check the deployed service URL for 8082 port
              uses: jtalk/url-health-check-action@v3
              with:
                url: http://${{ env.STOPPED_IP }}:8082/env
                max-attempts: 5 # Optional, defaults to 1
                retry-delay:  5s # Optional, only applicable to max-attempts > 1
                timeout: 30s
                
            - name: Change nginx upstream
              uses: appleboy/ssh-action@master
              with:
                username: ${{ secrets.NGINX_USER }}
                host: ${{ secrets.NGINX_IP }}
                key: ${{ secrets.NGINX_KEY }}
                script_stop: true
                script: |
                  docker exec -i nginx bash -c 'echo "set \$service_env ${{ env.TARGET_UPSTREAM }};" > /etc/nginx/conf.d/service-env.inc && service nginx reload'
                  
                  
            # 기존 인스턴스 중단
            - name: Terminate prev instance
              uses: appleboy/ssh-action@master
              with:
                username: ${{ secrets.SSH_USER }}
                host: ${{ env.CURRENT_IP }}
                key: ${{ secrets.SSH_KEY }}
                script_stop: true
                script: | 
                  docker stop tserver1
                  docker stop tserver2
                  docker rm tserver1
                  docker rm tserver2
